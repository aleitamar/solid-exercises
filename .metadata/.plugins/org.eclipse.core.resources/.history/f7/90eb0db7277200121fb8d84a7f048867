package com.theladders.solid.ocp;

import static org.junit.Assert.*;
import org.junit.Test;

import com.theladders.solid.ocp.jobseeker.JobseekerConfidentialityProfile;
import com.theladders.solid.ocp.jobseeker.JobseekerConfidentialityProfileDao;
import com.theladders.solid.ocp.resume.ConfidentialPhraseCategory;
import com.theladders.solid.ocp.resume.ConfidentialResumeHandler;
import com.theladders.solid.ocp.resume.JobseekerProfile;
import com.theladders.solid.ocp.resume.JobseekerProfileManager;
import com.theladders.solid.ocp.resume.ResumeConfidentialityManager;
import com.theladders.solid.ocp.user.User;

public class OCPTest
{
	@Test
	public void aUserShouldBeAbleToResetConfidentialityForAllCategories()
	{
		JobseekerProfileManager jobseekerProfileManager = new JobseekerProfileManager();
		JobseekerConfidentialityProfileDao jobseekerConfidentialityProfileDao = new JobseekerConfidentialityProfileDao();
		ConfidentialResumeHandler confidentialResumeHandler = new ConfidentialResumeHandler(jobseekerProfileManager, jobseekerConfidentialityProfileDao);
		ResumeConfidentialityManager resumeConfidentialityManager = new ResumeConfidentialityManager(confidentialResumeHandler);

		int id = 1; // get from command line?
		User user = new User(id);
		
	    JobseekerProfile jobseekerProfile = jobseekerProfileManager.getJobSeekerProfile(user);
	    JobseekerConfidentialityProfile jobseekerConfidentialityProfile = jobseekerConfidentialityProfileDao.fetchJobSeekerConfidentialityProfile(jobseekerProfile.getId());
		
	    jobseekerConfidentialityProfile.setConfidential(ConfidentialPhraseCategory.Name);
	    jobseekerConfidentialityProfile.setConfidential(ConfidentialPhraseCategory.MailingAddress);
	    jobseekerConfidentialityProfile.setConfidential(ConfidentialPhraseCategory.PhoneNumber);
	    jobseekerConfidentialityProfile.setConfidential(ConfidentialPhraseCategory.EmailAddress);
	    jobseekerConfidentialityProfile.setConfidential(ConfidentialPhraseCategory.ContactInfo);
	    jobseekerConfidentialityProfile.setConfidential(ConfidentialPhraseCategory.CompanyName);
	    jobseekerConfidentialityProfile.setConfidential(ConfidentialPhraseCategory.WorkExperience);

		assertEquals(true, resumeConfidentialityManager.isConfidential(user, ConfidentialPhraseCategory.Name));
		assertEquals(resumeConfidentialityManager.isConfidential(user, ConfidentialPhraseCategory.MailingAddress), true);
		assertEquals(resumeConfidentialityManager.isConfidential(user, ConfidentialPhraseCategory.PhoneNumber), true);
		assertEquals(resumeConfidentialityManager.isConfidential(user, ConfidentialPhraseCategory.EmailAddress), true);
		assertEquals(resumeConfidentialityManager.isConfidential(user, ConfidentialPhraseCategory.ContactInfo), true);
		assertEquals(resumeConfidentialityManager.isConfidential(user, ConfidentialPhraseCategory.CompanyName), true);
		assertEquals(resumeConfidentialityManager.isConfidential(user, ConfidentialPhraseCategory.WorkExperience), true);
		
	    resumeConfidentialityManager.makeAllCategoriesNonConfidential(user);
		
		//assertEquals(resumeConfidentialityManager.isConfidential(user, ConfidentialPhraseCategory.Name), false);
		//assertEquals(resumeConfidentialityManager.isConfidential(user, ConfidentialPhraseCategory.MailingAddress), false);
		//assertEquals(resumeConfidentialityManager.isConfidential(user, ConfidentialPhraseCategory.PhoneNumber), false);
		//assertEquals(resumeConfidentialityManager.isConfidential(user, ConfidentialPhraseCategory.EmailAddress), false);
		//assertEquals(resumeConfidentialityManager.isConfidential(user, ConfidentialPhraseCategory.ContactInfo), false);
		//assertEquals(resumeConfidentialityManager.isConfidential(user, ConfidentialPhraseCategory.CompanyName), false);
		//assertEquals(resumeConfidentialityManager.isConfidential(user, ConfidentialPhraseCategory.WorkExperience), false);
	}
	
		//resumeConfidentialityManager.makeAllContactInfoNonConfidential(user);
}